package org.firstinspires.ftc.teamcode;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;

@Autonomous
public class Auton extends LinearOpMode {
    public DcMotor BR, BL, FR, FL, lift;
    public Servo claw;
    double power = 0.5;

    public enum robotMotion
    {
        forward, backward, right, left, openClaw, closeClaw, linearup, lineardown;
    }

    @Override
    public void runOpMode() throws InterruptedException
    {
        BR = hardwareMap.get(DcMotor.class, "BR");
        BL = hardwareMap.get(DcMotor.class, "BL");
        //scooper = hardwareMap.get(Servo.class, "scooper");
        //holder = hardwareMap.get(Servo.class, "holder");
        lift = hardwareMap.get(DcMotor.class, "lift");
        claw = hardwareMap.get(Servo.class, "claw");
        BR.setDirection(DcMotorSimple.Direction.REVERSE);
        FR.setDirection(DcMotorSimple.Direction.FORWARD);
        FL.setDirection(DcMotorSimple.Direction.REVERSE);
        BL.setDirection(DcMotorSimple.Direction.FORWARD);
        lift.setDirection(DcMotorSimple.Direction.FORWARD);

        BR.setPower(0);
        FR.setPower(0);
        FL.setPower(0);
        BL.setPower(0);
        lift.setPower(0);
        claw.setPosition(0);
        //scooper.setPosition(0);
        //holder.setPosition(0);

        waitForStart();
        movementRL(300, robotMotion.right, 0.5);
        movementFB(300, robotMotion.forward, 0.5);
        robotsleep(200, 0.00);

    }

    private void movementFB(int Sleep, robotMotion action, double power)
    {
        if(action == robotMotion.forward)
        {
            BR.setPower(power);
            BL.setPower(power);
            FR.setPower(power);
            FL.setPower(power);
            sleep(Sleep);
            BR.setPower(0);
            FR.setPower(0);
            FL.setPower(0);
            BL.setPower(0);

        }
        else if (action == robotMotion.backward)
        {
            BR.setPower(power);
            BL.setPower(power);
            FR.setPower(power);
            FL.setPower(power);
            sleep(Sleep);
            BR.setPower(0);
            FR.setPower(0);
            FL.setPower(0);
            BL.setPower(0);
        }
    }
    private void movementRL(int Sleep, robotMotion action, double power)
    {
        if(action == robotMotion.left)
        {
            BR.setPower(power);
            BL.setPower(-power);
            FR.setPower(power);
            FL.setPower(-power);
            sleep(Sleep);
            BR.setPower(0);
            FR.setPower(0);
            FL.setPower(0);
            BL.setPower(0);

        }
        else if (action == robotMotion.right)
        {
            BR.setPower(-power);
            BL.setPower(power);
            FR.setPower(-power);
            FL.setPower(power);
            sleep(Sleep);
            BR.setPower(0);
            FR.setPower(0);
            FL.setPower(0);
            BL.setPower(0);
        }
    }

    private void linearup(int Sleep, double power)
    {
        lift.setPower(power);
        sleep(Sleep);
        lift.setPower(0);
    }

    private void lineardown(int Sleep, double power)
    {
        lift.setPower(power);
        sleep(Sleep);
        lift.setPower(0);
    }

    private void robotsleep(int sleep, double power)
    {
        BR.setPower(0);
        FR.setPower(0);
        FL.setPower(0);
        BL.setPower(0);
    }



}

